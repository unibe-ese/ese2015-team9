<?xml version="1.0" encoding="UTF-8" ?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd">

	<security:http auto-config="true" use-expressions="true">
		<!-- IMPORTANT !!
			access-denied-handler would be only called if a user is 
			logged in and attempts to load a page, where he has no access to. Since we 
			have only one acces-role in use, it is never used. Instead the page loaded 
			when page denied and not logged in is the login-page below! 
		-->
		<security:access-denied-handler
			error-page="/denied" />
		<security:intercept-url pattern="/login"
			access="permitAll" />
		<security:intercept-url pattern="/profile"
			access="hasRole('ROLE_USER')" />
		<security:intercept-url pattern="/editProfile"
			access="hasRole('ROLE_USER')" />
		<security:intercept-url pattern="/addCourse"
			access="hasRole('ROLE_USER')" />
		<security:form-login login-page="/denied"
			authentication-failure-url="/login?error=true" default-target-url="/profile" />
		<security:logout invalidate-session="true"
			logout-success-url="/" logout-url="/j_spring_security_logout" />
	</security:http>

	<!-- Declare an authentication-manager to use a custom userDetailsService -->
	<security:authentication-manager>
		<security:authentication-provider
			user-service-ref="customUserDetailsService">
			<security:password-encoder ref="passwordEncoder" />
		</security:authentication-provider>
	</security:authentication-manager>

	<!-- Use a Md5 encoder since the user's passwords are stored as Md5 in the 
		database -->
	<bean
		class="org.springframework.security.authentication.encoding.Md5PasswordEncoder"
		id="passwordEncoder" />
	<bean id="customUserDetailsService"
		class="team9.tutoragency.controller.service.CustomUserDetailsService" />


</beans>
